---
- name: Get Fortinet Fortigate firewall_policy facts
  gather_facts: false
  hosts: fortigates
  collections:
    - fortinet.fortios

  tasks:
  - name: Get Firewall Policy From Fortigate
    block:
    - name: use fortios_configuration_fact module to get firewall_policy facts
      fortios_configuration_fact:
        vdom: "root"
        selectors:
        - selector: firewall_policy
      register: forti_firewallpolicy
    
    - name: debug forti_firewallpolicy
      ansible.builtin.debug:
        msg: "{{ forti_firewallpolicy.meta[0].results | to_nice_yaml }}"
        verbosity: 2
      delegate_to: localhost
  
    - name: set fact
      ansible.builtin.set_fact:
        firewall_policy: "{{ forti_firewallpolicy.meta[0].results }}"
        #firewall_policy: "{{ forti_firewallpolicy.meta[0].results | to_nice_yaml }}"
        verbosity: 2
      delegate_to: localhost
  
    - name: debug firewall_policy
      ansible.builtin.debug:
        var: firewall_policy
        verbosity: 2
      delegate_to: localhost
    tags:
      - always
    #### END OF BLOCK

  - name: Write out the policy to host_vars
    ansible.builtin.template:
      src: "./templates/firewall_policy.j2"
      dest: "./host_vars/{{ inventory_hostname }}.yml" 
    delegate_to: localhost
    tags:
      - never
      - local


  - name: GitOps functions
    block:
    - name: Retrieve a repository from a distant location and make it available locally
      ansible.scm.git_retrieve:
        origin:
          url: "{{ git_url }}"
      register: repository
 
    - name: Debug repository data
      ansible.builtin.debug:
        var: repository
        verbosity: 2
 
    - name: Create a config_backups directory if it does not exist
      ansible.builtin.file:
        path: "{{ repository['path'] }}/config_backups"
        state: directory
        mode: '0755'
      when: ansible_facts.net_config is defined
 
    - name: Add to the repository
      ansible.builtin.copy:
        content: "{{ ansible_facts.net_config }}"
        dest: "{{ repository['path'] }}/config_backups/{{ inventory_hostname }}"
      when: ansible_facts.net_config is defined
      register: result

    - name: Create a host_vars directory if it does not exist
      ansible.builtin.file:
        path: "{{ repository['path'] }}/host_vars"
        state: directory
        mode: '0755'
      when: '"routing" in ansible_net_gather_subset'
 
    - name: Add global facts to the repository
      ansible.builtin.lineinfile:
        line: "{{ ansible_facts | to_nice_yaml }}"
        path: "{{ repository['path'] }}/host_vars/{{ inventory_hostname }}"
        create: yes
      when: '"routing" in ansible_net_gather_subset'
      register: result
 
    - name: Add security rules to the host_vars repository
      ansible.builtin.lineinfile:
        line: "{{ registered_sec_rules | to_nice_yaml }}"
        path: "{{ repository['path'] }}/host_vars/{{ inventory_hostname }}"
        create: yes
      when: registered_sec_rules is defined
 
    - name: Set date_time variable
      ansible.builtin.set_fact:
        date_time: "{{ lookup ('pipe', 'date +%Y-%m-%d%H:%M:%S') }}"
 
    - name: Publish the changes
      ansible.scm.git_publish:
        commit:
          message: "Backup at {{ date_time }}"
        include: "--all"
        path: "{{ repository['path'] }}"
        user:
          name: "Todd Ruch"
          email: truch@redhat.com
      when: result.changed
    ### End of GitOps Block
    tags:
      - gitops
      - never

